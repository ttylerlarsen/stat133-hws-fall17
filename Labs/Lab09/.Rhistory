else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
drawn_balls <- list()
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'white')
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
rm(list=ls())
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
blue0_prob <- 0
blue1_prob <- 0
blue2_prob <- 0
blue3_prob <- 0
blue4_prob <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue0_prob, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
probs <- as.data.frame(do.call("rbind", probs))
#convert counts to probabilities/ratios
blue0_prob <- blue0 / 1000
blue1_prob <- blue1 / 1000
blue2_prob <- blue2 / 1000
blue3_prob <- blue3 / 1000
blue4_prob <- blue4 / 1000
blue0_prob
blue1_prob
blue2_prob
blue3_prob
blue4_prob
#test to make sure the probabilites add up to 1
blue0_prob+blue1_prob+blue2_prob+blue3_prob+blue4_prob
View(probs)
View(probs)
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line()
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line(~smoth)
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line(aes(~smoth))
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line()
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line()
library(ggplot2)
library(tidyr)
probs %>%
gather(key,value, V2, V3, V4, V5, V6) %>%
ggplot(aes(x=V1, y=value, colour=key)) +
geom_line()
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
blue0_prob <- 0
blue1_prob <- 0
blue2_prob <- 0
blue3_prob <- 0
blue4_prob <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
probs <- as.data.frame(do.call("rbind", probs))
#convert counts to probabilities/ratios
blue0_prob <- blue0 / 1000
blue1_prob <- blue1 / 1000
blue2_prob <- blue2 / 1000
blue3_prob <- blue3 / 1000
blue4_prob <- blue4 / 1000
blue0_prob
blue1_prob
blue2_prob
blue3_prob
blue4_prob
#test to make sure the probabilites add up to 1
blue0_prob+blue1_prob+blue2_prob+blue3_prob+blue4_prob
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
box1 <- c('blue', 'blue', 'red')
box2 <- c('blue', 'blue', 'red', 'red', 'red', 'red', 'white')
drawn_balls <- list()
# (repeated 1000 times)
for (i in 1:1000)
{
rand_num <- runif(1)
if (rand_num > .5)
result <- sample(box1, size = 4, replace = TRUE) # w/ replacement
else if (rand_num < .5)
result <- sample(box2, size = 4, replace = FALSE) # w/o replacement
drawn_balls[[i]] <- result
}
drawn_balls <- as.data.frame(do.call("rbind", drawn_balls))
count <- 0
blue0 <- 0
blue1 <- 0
blue2 <- 0
blue3 <- 0
blue4 <- 0
blue0_prob <- 0
blue1_prob <- 0
blue2_prob <- 0
blue3_prob <- 0
blue4_prob <- 0
probs <- list()
for (i in 1:1000){
for (j in 1:4){
if (drawn_balls[i, j] == 'blue')
count <- count + 1
}
if (count == 0){
blue0 <- blue0 + 1
blue0_prob <- blue0 / i
}
else if (count == 1){
blue1 <- blue1 + 1
blue1_prob <- blue1 / i
}
else if (count == 2){
blue2 <- blue2 + 1
blue2_prob <- blue2 / i
}
else if (count == 3){
blue3 <- blue3 + 1
blue3_prob <- blue3 / i
}
else if (count == 4){
blue4 <- blue4 + 1
blue4_prob <- blue4 / i
}
prob_v <- (c(i, blue0_prob, blue1_prob, blue2_prob, blue3_prob, blue4_prob))
probs[[i]] <-  prob_v
count <- 0
}
probs <- as.data.frame(do.call("rbind", probs))
#convert counts to probabilities/ratios
blue0_prob <- blue0 / 1000
blue1_prob <- blue1 / 1000
blue2_prob <- blue2 / 1000
blue3_prob <- blue3 / 1000
blue4_prob <- blue4 / 1000
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
knitr::include_graphics('app1.png')
runApp('app1a/app1a.R')
runApp('app1a/app1a.R')
knitr::include_graphics('app2.png')
runApp('app2a/app2a.R')
runApp('app1a/app1a.R')
runApp('app2a/app2a.R')
runApp('app2a/app2a.R')
knitr::include_graphics('app2.png')
knitr::include_graphics('app3.png')
runApp('app3.R')
runApp('app3a/app3a.R')
library(shiny); runApp('app4.R')
