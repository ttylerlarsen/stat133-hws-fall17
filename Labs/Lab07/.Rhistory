B <- matrix(NA, nrow = 5, ncol = 4)
# for loop to get matrix B
for (i in 1:nrow(A)) {
for (j in 1:ncol(A)) {
B[i,j] <- A[i,j] + i
}
}
B
set.seed(123)
X <- matrix(rnorm(12), nrow = 4, ncol = 3)
X
# for loops to get Y
# for loop to get matrix B
Y <- x
Y
# for loops to get Y
# for loop to get matrix B
Y <- X
Y
Y <- X
# for loop to get matrix Y
for (i in 1:nrow(Y)) {
for (j in 1:ncol(Y)) {
if (Y[i,j] < 0)
Y[i,j] <- (Y[i,j])^2
else
Y[i,j] <- sqrt(Y[i,j])
}
}
Y
# Divide a number by 2 until it becomes odd.
val_rep <- 898128000 # Change this value!
repeat {
print(val_rep)
if (val_rep %% 2 == 1) { # If val_rep is odd,
break                  # end the loop.
}
val_rep <- val_rep / 2 # Divide val_rep by 2 since val_rep was even.
# When the end of the loop is reached, return to the beginning of the loop.
}
# Divide a number by 2 until it becomes odd.
val_while <- 898128000 # Change this value!
while (val_while %% 2 == 0) { # Continue the loop as long as val_while is even.
print(val_while)
val_while <- val_while / 2
}
print(val_while)
# your reduce() function
reduce <- function(x) {
while (x %% 2 == 0) { # Continue the loop as long as val_while is even.
print(x)
x <- x / 2
}
return(val_while)
}
reduce(898128000)
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
mean.default(1:100)
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
n <- 1
while (n < 101)
{
x <- n/100
mean <- mean + x
n <- n + 1
}
mean
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
n <- 1
mean = 0
while (n < 101)
{
x <- n/100
mean <- mean + x
n <- n + 1
}
mean
x <- 5
x++
x <- 5
x ++
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
n <- 0
mean = 0
while (n < 101)
{
x <- n/100
mean <- mean + x
n <- n + 1
}
mean
mean <-0
j <- 0
repeat {
if (j == 100)
break
else
{
x <- j/100
mean <- mean + 1
}
j <- j + 1
}
mean
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
n <- 0
mean = 0
while (n < 101)
{
x <- n/100
mean <- mean + x
n <- n + 1
}
mean
mean <- 0
j <- 0
repeat {
if (j == 100)
break
else
{
x <- j/100
mean <- mean + x
}
j <- j + 1
}
mean
x<- 0
mean <- 0
for(j in 1:100)
{
x <- j/100
mean <- mean + x
}
mean
n <- 0
mean = 0
while (n < 101)
{
x <- n/100
mean <- mean + x
n <- n + 1
}
mean
mean <- 0
j <- 0
repeat {
if (j == 101)
break
else
{
x <- j/100
mean <- mean + x
}
j <- j + 1
}
mean
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sigma
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
while (j < 101)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
while (j < 101)
{
x <- (i - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
j < 0
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
j <- 0
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
j <- 0
while (j < 100)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
j <- 1
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
#-----------------------------
sigma <- 0
j <- 1
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
#-----------------------------
sigma <- 0
k <- 1
repeat {
if (k == 101)
break
else
{
x <- (k - 50.5)^2
sigma <- sigma + x
}
k <- k + 1
}
sigma
sigma <- 0
for (i in 1:100)
{
x <- (i - 50.5)^2
sigma <- sigma + x
}
sd <- sqrt(1/99 * sigma)
sd
#-----------------------------
sigma <- 0
j <- 1
while (j < 101)
{
x <- (j - 50.5)^2
sigma <- sigma + x
j <- j + 1
}
sd <- sqrt(1/99 * sigma)
sd
#-----------------------------
sigma <- 0
k <- 1
repeat {
if (k == 101)
break
else
{
x <- (k - 50.5)^2
sigma <- sigma + x
}
k <- k + 1
}
sd <- sqrt(1/99 * sigma)
sd
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/n)
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/n)
gmean
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/50)
gmean
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/50)
gmean
#-----------------------------------
gmean <- 1
i <- 1
while(i > 51)
{
gmean <- gmean*i
i <- i + 1
}
gmean <- gmean^(1/50)
gmean
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/50)
gmean
#-----------------------------------
gmean <- 1
i <- 1
while(i < 51)
{
gmean <- gmean*i
i <- i + 1
}
gmean <- gmean^(1/50)
gmean
gmean <- 1
for (i in 1:50)
{
gmean <- gmean * i
}
gmean <- gmean^(1/50)
gmean
#-----------------------------------
gmean <- 1
i <- 1
while(i < 51)
{
gmean <- gmean*i
i <- i + 1
}
gmean <- gmean^(1/50)
gmean
#----------------------------------
gmean <- 1
i <- 1
repeat{
if (i > 50)
break
else
gmean <- gmean*i
i <- i + 1
}
gmean <- gmean^(1/50)
gmean
