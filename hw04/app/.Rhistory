else if (x < 95)
grade <-  'A'
else
grade <- 'A+'
grade
}
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
print_stats(summary_stats(dat$HW1))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
class(print_stats(summary_stats(dat$HW1)))
df <- print_stats(summary_stats(dat$HW1))
df2 <- print_stats(summary_stats(dat$HW1))
###################################
# title: "HW04 Functions"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
###################################
# title: "remove_missing"
# description: takes a vector, and returns the input vector without missing values
# input: a vector, with/out missing values
# output: the same vector without the missing values
###################################
remove_missing <- function(x){
x2 <- x[!is.na(x)]
x2
}
###################################
# title: "get_minimum"
# description: takes a numeric vector to find the minimum value
# input: numeric vector
# output: the smallest value in the vector
###################################
get_minimum <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
x <- sort(x, decreasing = FALSE)
min <- x[1]
min
}
###################################
# title: "get maximum"
# description: takes a numeric vector to find the maximum value
# input: numeric vector
# output: the largest value in the vector
###################################
get_maximum <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
x <- sort(x, decreasing = TRUE)
max <- x[1]
max
}
###################################
# title: "get range"
# description: finds the range between the min and max values in a vector
# input: numeric vector
# output: the value of the maximum element minus the minimum element
###################################
get_range <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
range <- get_maximum(x) - get_minimum(x)
range
}
###################################
# title: "get_median"
# description: computes the median of the input vector
# input: numeric vector
# output: the median value of the input vector
###################################
get_median <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
x <- sort(x, decreasing = FALSE)
if (length(x)%%2 != 0)
median <- x[(length(x)+1)/2]
else
median <- (x[length(x)/2] + x[(length(x)+2) / 2]) / 2
median
}
###################################
# title: "get_average"
# description: computes the average of the input vector
# input: numeric vector
# output: the average value of the input vector
###################################
get_average <- function(x, na.rm = TRUE){
avg <- 0
if (na.rm == TRUE)
x <- remove_missing(x)
for (i in 1:length(x))
avg <- avg + x[i]/length(x)
avg
}
###################################
# title: "get_stv"
# description: computes the standard deviation of the input vector
# input: numeric vector
# output:the standard deviation of the input vector
###################################
get_stv <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
sum <- 0
mean <- get_average(x)
for (i in 1:length(x))
sum <- sum + (1 / (length(x) -1)) * (mean - x[i])^2
sum <- sqrt(sum)
sum
}
###################################
# title: "get_quartile1"
# description: computes the first quartile of the input vector
# input: numeric vector
# output: the third quartile of the unput vector
###################################
get_quartile1 <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
q1 <- as.numeric(quantile(x, prob = .25))
q1
}
###################################
# title: "get_quartile3"
# description: computes the third quartile of the input vector
# input: numeric vector
# output: the third quartile of the unput vector
###################################
get_quartile3 <- function(x, na.rm = TRUE){
if (na.rm == TRUE)
x <- remove_missing(x)
q3 <- as.numeric(quantile(x, prob = .75))
q3
}
###################################
# title: "count_missing"
# description: calculates the number of missing (NA) values
# input: numeric vector
# output:the number of missing values
###################################
count_missing <- function(x){
count <- length(x) - length(remove_missing(x))
count
}
###################################
# title: summary_stats
# description: creates a list of summary statistics
# input: numeric vector
# output: list of summary statistics
###################################
summary_stats <- function(x){
stats <- list(minimum = get_minimum(x),
percent10 = as.numeric(quantile(x, prob = .1, na.rm = TRUE)),
quartile1 = get_quartile1(x),
median = get_median(x),
mean = get_average(x),
quartile3 = get_quartile3(x),
percent90 = as.numeric(quantile(x, prob = .9, na.rm = TRUE)),
maximum = get_maximum(x),
range = get_range(x),
stdev = get_stv(x),
missing = count_missing(x)
)
stats
}
###################################
# title: "print_stats"
# description: takes a list of summary statistics, and prints the values in a nice format
# input: list of summary stats
# output: data frame of stats?
###################################
print_stats <- function(list){
ls <- list()
ls <- str(list)
}
###################################
# title: "rescale100"
# description: compute a rescaled vector with a potential scale from 0 to 100
# input: takes three arguments: a numeric vector x, a minimum xmin, and a maximum xmax
# output: rescaled vector with a potential scale from 0 to 100
###################################
rescale100 <- function(x, xmin, xmax){
z <- 100 * ((x - xmin) / (xmax - xmin))
z
}
###################################
# title: "drop_lowest"
# description: drops the lowest value in a vector
# input: numeric vector of length n
# output: numeric vector of length n-1
###################################
drop_lowest <- function(x){
x <- sort(x, decreasing = TRUE)
x <- c(x[1:(length(x)-1)])
x
}
###################################
# title: "score_homework"
# description: computes a single homework value
# input: numeric vector of homework scores
# output: the average of the homework scores
###################################
score_homework <- function(x, drop = FALSE){
if (drop == TRUE)
x <- drop_lowest(x)
score <- get_average(x)
score
}
###################################
# title: "score_quiz
# description: computes a single quiz value
# input: numeric vector of quiz scores
# output:  the average of the quiz scores
###################################
score_quiz <- function(x, drop = FALSE){
if (drop == TRUE)
x <- drop_lowest(x)
score <- get_average(x)
score
}
###################################
# title: "score_lab"
# description: takes the lab attendence and coverts it into a score
# input: numeric value of lab attendence
# output: corresponding lab score
###################################
score_lab <- function(x){
switch(as.character(x),
'12' = result <- 100,
'11' = result <- 100,
'10' = result <- 80,
'9' = result <- 60,
'8' = result <- 40,
'7' = result <- 20,
result <- 0
)
result
}
###################################
# title: "hwq_aggregator"
# description: helps tabulate the final scores in the hw and quiz categories
# input: dataframe consisting of hw or quiz scores
# output: vector with corresponding final scores for each student
###################################
hwq_aggregator <- function(df){
df <- t(df)
df <- data.frame(df)
df_scores <- data.frame()
for(i in 1:ncol(df))
df_scores[i,1] <- score_homework(df[,i], drop = TRUE)
df <- unlist(df_scores[,1])
df
}
###################################
# title: "get_grade"
# description: assigns each student a letter grade
# input: vector of overall student percent grade
# output: character letter grade
###################################
get_grade <- function(x){
grade <- ''
if (x < 50)
grade <- 'F'
else if (x < 60)
grade <- 'D'
else if (x < 70)
grade <- 'C-'
else if (x < 77.5)
grade <- 'C'
else if (x < 79.5)
grade <- 'C+'
else if (x < 82)
grade <- 'B-'
else if (x < 86)
grade <- 'B'
else if (x < 88)
grade <- 'B+'
else if (x < 90)
grade <- 'A-'
else if (x < 95)
grade <-  'A'
else
grade <- 'A+'
grade
}
df2 <- print_stats(summary_stats(dat$HW1))
df3 <- print_stats(summary_stats(dat$HW1))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- str(dat$HW1)
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- summary.default(dat$HW1)
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- list(summary.default(dat$HW1))
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- summary.default(dat$HW1)
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- capture.output(str(dat$HW1))
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- capture.output(print_stats(summary_stats(dat$HW1))
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- capture.output(print_stats(summary_stats(dat$HW1)))
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))))
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))), colnames = FALSE)
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))), colnames = FALSE)
list1 <- list1[2,]
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))), colnames = FALSE)
list1 <- list1[2:nrow(list1),]
list1
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))), colnames = c("", ""))
list1 <- list1[2:nrow(list1),]
list1
View(list1)
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))))
colnames(list1) <-  c("", "")
View(list1)
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))))
colnames(list1) <-  c(" ")
df3 <- print_stats(summary_stats(dat$HW1))
list1 <- data.frame(capture.output(print_stats(summary_stats(dat$HW1))))
colnames(list1) <-  c(" ")
list1
list1
print_stats <- function(list){
list1 <- data.frame(capture.output(str(list)))
colnames(list1) <-  c(" ")
list1
}
print_stats(summary_stats(dat$HW1))
class(print_stats(summary_stats(dat$HW1)))
print_stats <- function(list){
list1 <- data.frame(capture.output(str(list)))
colnames(list1) <-  c(" ")
list1 <- list(list1)
}
print_stats <- function(list){
list1 <- data.frame(capture.output(str(list)))
colnames(list1) <-  c(" ")
list1 <- list(list1)
list1
}
print_stats(summary_stats(dat$HW1))
print_stats <- function(list){
list1 <- data.frame(capture.output(str(list)))
colnames(list1) <-  c(" ")
list1
}
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
View(list1)
print_stats <- function(list){
list1 <- data.frame(capture.output(str(list)))
colnames(list1) <-  c(" ")
list1[2:12,]
}
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
print_stats <- function(list){
name <- names(list)
outcome <- c()
for (i in 1:length(lst)){
if (nchar(name[i])==max(nchar(names(list)))){
cat(name[i], ": ", formulate(list[[i]]), "\n", sep = "")
}
else{
cat(name[i], c(rep(" ", max(nchar(names(lst)))-nchar(name[i]))),
": ", formulate(lst[[i]]), "\n", sep = "")
}
}
}
print_stats(summary_stats(dat$HW1))
print_stats <- function(list){
name <- names(list)
outcome <- c()
for (i in 1:length(list)){
if (nchar == max(nchar(names(list)))){
cat(name[i], ": ", formulate(list[[i]]), "\n", sep = "")
}
else{
cat(name[i], c(rep(" ", max(nchar(names(list)))-nchar(name[i]))),
": ", formulate(lst[[i]]), "\n", sep = "")
}
}
}
print_stats(summary_stats(dat$HW1))
print_stats <- function(lst){
name <- names(lst)
outcome <- c()
for (i in 1:length(lst)){
if (nchar(name[i])==max(nchar(names(lst)))){
cat(name[i], ": ", formulate(lst[[i]]), "\n", sep = "")
}
else{
cat(name[i], c(rep(" ", max(nchar(names(lst)))-nchar(name[i]))),
": ", formulate(lst[[i]]), "\n", sep = "")
}
}
}
print_stats(summary_stats(dat$HW1))
print_stats <- function(lst){
formulate <- function(num){
sprintf('%0.4f', num)}
name <- names(lst)
outcome <- c()
for (i in 1:length(lst)){
if (nchar(name[i])==max(nchar(names(lst)))){
cat(name[i], ": ", formulate(lst[[i]]), "\n", sep = "")
}
else{
cat(name[i], c(rep(" ", max(nchar(names(lst)))-nchar(name[i]))),
": ", formulate(lst[[i]]), "\n", sep = "")
}
}
}
print_stats(summary_stats(dat$HW1))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
getwd()
setwd("/Users/tylerlarsen/Desktop/stat133/stat133-hws-fall17/hw04/app")
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
df3 <- print_stats(summary_stats(dat$HW1))
cor(dat$HW1, dat$HW2)
runApp('gradvis.R')
runApp('gradvis.R')
runApp('gradvis.R')
class(cor(dat$HW1, dat$HW2))
