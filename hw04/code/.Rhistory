'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (i in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (i in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (i in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
length
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (i in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
length
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
const
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
vowels
const
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length: ", "Vowels: ", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
letrs <- sample(letters, size = 100, replace = TRUE)
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length: ", "Vowels: ", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
letrs <- sample(letters, size = 100, replace = TRUE)
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length: ", "Vowels: ", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
letrs <- sample(letters, size = 100, replace = TRUE)
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length: ", "Vowels: ", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
# your function count_letters()
count_letters <- function(letrs) {
length <- length(letrs)
vowels <- 0
const <- 0
letrs <- sample(letters, size = 100, replace = TRUE)
for (x in 1:length(letrs))
{
switch(letrs[x],
'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length:", "Vowels:", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
install.packages('ggmap')
library('ggmap')
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
install.packages('stringr')
library('stringr')
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
dat$lat <- as.numeric(unlist(lat))
dat$lon <- as.numeric(unlist(lon))
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
dat$lat <- as.numeric(unlist(lat))
dat$lon <- as.numeric(unlist(lon))
rm(list=ls())
library(shiny); runApp('Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
###################################
# title: "HW04 Clean Data Script"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
source('functions.R')
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(dat)
sink()
#replace the NA elements with 0
for (i in 1:nrow(dat))
for (j in 1:ncol(dat))
if (is.na(dat[i,j]))
dat[i,j] <- 0
#rescaling the quizes & tests to scores out of 100
dat$QZ1 <- rescale100(dat$QZ1, 0, 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
dat$Lab <- unlist(lapply(dat$ATT, score_lab))
#creating dataframes of hw and quizes, in order to calculate totals after drop
hws <- data.frame(hw1 = dat$HW1,
hw2 = dat$HW2,
hw3 = dat$HW3,
hw4 = dat$HW4,
hw5 = dat$HW5,
hw6 = dat$HW6,
hw7 = dat$HW7,
hw8 = dat$HW8,
hw9 = dat$HW9)
qzs <- data.frame(q1 = dat$QZ1,
q2 = dat$QZ2,
q3 = dat$QZ3,
q4 = dat$QZ4)
#adding columns to dat with the final scores in both the hw and quiz categories
dat$Homework <- hwq_aggregator(hws)
dat$Quiz <- hwq_aggregator(qzs)
#create column with overall grade as a percent
dat$Overall <- unlist(.10 * dat$ATT +
.30 * dat$Homework +
.15 * dat$Quiz +
.20 * dat$Test1 +
.25 * dat$Test2)
#create column with overall grade as a letter
dat$Grade <- unlist(lapply(dat$Overall, get_grade))
names <- c("../output/Test1-stats.txt", "../output/Test2-stats.txt", "../output/Lab-stats.txt",
"../output/homework-stats.txt", "../output/Quiz-stats.txt", "../output/Overall-stats.txt")
#save the summary statistics for the 6 columns selected to txt files
for(i in 17:22)
{
sink(names[i-16])
print_stats((summary_stats(dat[,i])))
sink()
}
#export the clean data to a csv file
write.csv(dat, "../data/cleandata/summary-cleanscores.csv")
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
getwd()
setwd("/Users/tylerlarsen/desktop/stat133/stat133-hws-fall17/hw04/code")
###################################
# title: "HW04 Clean Data Script"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
source('functions.R')
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(dat)
sink()
#replace the NA elements with 0
for (i in 1:nrow(dat))
for (j in 1:ncol(dat))
if (is.na(dat[i,j]))
dat[i,j] <- 0
#rescaling the quizes & tests to scores out of 100
dat$QZ1 <- rescale100(dat$QZ1, 0, 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
dat$Lab <- unlist(lapply(dat$ATT, score_lab))
#creating dataframes of hw and quizes, in order to calculate totals after drop
hws <- data.frame(hw1 = dat$HW1,
hw2 = dat$HW2,
hw3 = dat$HW3,
hw4 = dat$HW4,
hw5 = dat$HW5,
hw6 = dat$HW6,
hw7 = dat$HW7,
hw8 = dat$HW8,
hw9 = dat$HW9)
qzs <- data.frame(q1 = dat$QZ1,
q2 = dat$QZ2,
q3 = dat$QZ3,
q4 = dat$QZ4)
#adding columns to dat with the final scores in both the hw and quiz categories
dat$Homework <- hwq_aggregator(hws)
dat$Quiz <- hwq_aggregator(qzs)
#create column with overall grade as a percent
dat$Overall <- unlist(.10 * dat$ATT +
.30 * dat$Homework +
.15 * dat$Quiz +
.20 * dat$Test1 +
.25 * dat$Test2)
#create column with overall grade as a letter
dat$Grade <- unlist(lapply(dat$Overall, get_grade))
names <- c("../output/Test1-stats.txt", "../output/Test2-stats.txt", "../output/Lab-stats.txt",
"../output/homework-stats.txt", "../output/Quiz-stats.txt", "../output/Overall-stats.txt")
#save the summary statistics for the 6 columns selected to txt files
for(i in 17:22)
{
sink(names[i-16])
print_stats((summary_stats(dat[,i])))
sink()
}
#export the clean data to a csv file
write.csv(dat, "../data/cleandata/summary-cleanscores.csv")
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133-fall-2017/apps/conditional-panels')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133-fall-2017/apps/ggvis-demo/app-ggvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
table(dat$Grade)
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
