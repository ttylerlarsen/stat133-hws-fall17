'a' = vowels <- vowels + 1,
'e' = vowels <- vowels + 1,
'i' = vowels <- vowels + 1,
'o' = vowels <- vowels + 1,
'u' = vowels <- vowels + 1,
const <- const + 1
)
}
counts <- c(length, vowels, const)
words <- c("Length:", "Vowels:", "Consonants:")
paste(words, counts, sep = ' ')
}
count_letters(letrs)
install.packages('ggmap')
library('ggmap')
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
github <- "https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/"
datafile <- "data/mobile-food-sf.csv"
download.file(paste0(github, datafile), destfile = "mobile-food-sf.csv")
dat <- read.csv('mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
dat <- read.csv('../data/mobile-food-sf.csv', stringsAsFactors = FALSE)
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
install.packages('stringr')
library('stringr')
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
dat$lat <- as.numeric(unlist(lat))
dat$lon <- as.numeric(unlist(lon))
lat_lon <- str_split(
str_replace_all(dat$Location, pattern = '\\(|\\)', replacement = ''),
pattern = ',')
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
dat$lat <- as.numeric(unlist(lat))
dat$lon <- as.numeric(unlist(lon))
rm(list=ls())
{
sink(names[i-16])
print_stats((summary_stats(dat[,i])))
sink()
}
write.csv(dat, "../data/cleandata/summary-cleanscores.csv")
rm(list=ls())
###################################
# title: "HW04 Clean Data Script"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
source('functions.R')
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(dat)
sink()
#replace the NA elements with 0
for (i in 1:nrow(dat))
for (j in 1:ncol(dat))
if (is.na(dat[i,j]))
dat[i,j] <- 0
#rescaling the quizes & tests to scores out of 100
dat$QZ1 <- rescale100(dat$QZ1, 0, 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
dat$Lab <- unlist(lapply(dat$ATT, score_lab))
#creating dataframes of hw and quizes, in order to calculate totals after drop
hws <- data.frame(hw1 = dat$HW1,
hw2 = dat$HW2,
hw3 = dat$HW3,
hw4 = dat$HW4,
hw5 = dat$HW5,
hw6 = dat$HW6,
hw7 = dat$HW7,
hw8 = dat$HW8,
hw9 = dat$HW9)
qzs <- data.frame(q1 = dat$QZ1,
q2 = dat$QZ2,
q3 = dat$QZ3,
q4 = dat$QZ4)
#adding columns to dat with the final scores in both the hw and quiz categories
dat$Homework <- hwq_aggregator(hws)
dat$Quiz <- hwq_aggregator(qzs)
#create column with overall grade as a percent
dat$Overall <- unlist(.10 * dat$Lab +
.30 * dat$Homework +
.15 * dat$Quiz +
.20 * dat$Test1 +
.25 * dat$Test2)
#create column with overall grade as a letter
dat$Grade <- unlist(lapply(dat$Overall, get_grade))
names <- c("../output/Test1-stats.txt", "../output/Test2-stats.txt", "../output/Lab-stats.txt",
"../output/homework-stats.txt", "../output/Quiz-stats.txt", "../output/Overall-stats.txt")
#save the summary statistics for the 6 columns selected to txt files
for(i in 17:22)
{
sink(names[i-16])
print_stats((summary_stats(dat[,i])))
sink()
}
#export the clean data to a csv file
write.csv(dat, "../data/cleandata/summary-cleanscores.csv")
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
freq_table <- data.frame(c('A+', 'A', 'A-','B+','B',
'B-','C+', 'C', 'C-', 'D', 'F'),
c(16,54,31,30,52,29,23,38,27,19,15),
c(0.05,0.16,0.09,0.09,0.16,0.09,
0.07,0.11,0.08,0.06,0.04))
colnames(freq_table) <- c("Grade", "Freq", "Prop")
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
pwd
getwd()
setwd("/Users/tylerlarsen/Desktop/stat133/stat133-hws-fall17/hw04/code/")
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
source('functions.R')
library(shiny); runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
freq_table <- data.frame(c('A+', 'A', 'A-','B+','B',
'B-','C+', 'C', 'C-', 'D', 'F'),
c(16,54,31,30,52,29,23,38,27,19,15),
c(0.05,0.16,0.09,0.09,0.16,0.09,
0.07,0.11,0.08,0.06,0.04))
colnames(freq_table) <- c("Grade", "Freq", "Prop")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
View(dat)
###################################
# title: "HW04 Clean Data Script"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
#if not already, must set wd to where this file is located
source('functions.R')
dat <- read.csv('../data/rawdata/rawscores.csv', stringsAsFactors = FALSE)
sink('../output/summary-rawscores.txt')
str(dat)
sink()
#replace the NA elements with 0
for (i in 1:nrow(dat))
for (j in 1:ncol(dat))
if (is.na(dat[i,j]))
dat[i,j] <- 0
#rescaling the quizes & tests to scores out of 100
dat$QZ1 <- rescale100(dat$QZ1, 0, 12)
dat$QZ2 <- rescale100(dat$QZ2, 0, 18)
dat$QZ3 <- rescale100(dat$QZ3, 0, 20)
dat$QZ4 <- rescale100(dat$QZ4, 0, 20)
dat$Test1 <- rescale100(dat$EX1, 0, 80)
dat$Test2 <- rescale100(dat$EX2, 0, 90)
dat$Lab <- unlist(lapply(dat$ATT, score_lab))
#creating dataframes of hw and quizes, in order to calculate totals after drop
hws <- data.frame(hw1 = dat$HW1,
hw2 = dat$HW2,
hw3 = dat$HW3,
hw4 = dat$HW4,
hw5 = dat$HW5,
hw6 = dat$HW6,
hw7 = dat$HW7,
hw8 = dat$HW8,
hw9 = dat$HW9)
qzs <- data.frame(q1 = dat$QZ1,
q2 = dat$QZ2,
q3 = dat$QZ3,
q4 = dat$QZ4)
#adding columns to dat with the final scores in both the hw and quiz categories
dat$Homework <- hwq_aggregator(hws)
dat$Quiz <- hwq_aggregator(qzs)
#create column with overall grade as a percent
dat$Overall <- unlist(.10 * dat$Lab +
.30 * dat$Homework +
.15 * dat$Quiz +
.20 * dat$Test1 +
.25 * dat$Test2)
#create column with overall grade as a letter
dat$Grade <- unlist(lapply(dat$Overall, get_grade))
names <- c("../output/Test1-stats.txt", "../output/Test2-stats.txt", "../output/Lab-stats.txt",
"../output/homework-stats.txt", "../output/Quiz-stats.txt", "../output/Overall-stats.txt")
#save the summary statistics for the 6 columns selected to txt files
for(i in 17:22)
{
sink(names[i-16])
print_stats((summary_stats(dat[,i])))
sink()
}
#export the clean data to a csv file
write.csv(dat, "../data/cleandata/summary-cleanscores.csv")
sink('../output/summary-cleanscores.txt')
str(dat)
sink()
freq_table <- data.frame(c('A+', 'A', 'A-','B+','B',
'B-','C+', 'C', 'C-', 'D', 'F'),
c(16,54,31,30,52,29,23,38,27,19,15),
c(0.05,0.16,0.09,0.09,0.16,0.09,
0.07,0.11,0.08,0.06,0.04))
colnames(freq_table) <- c("Grade", "Freq", "Prop")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
sink()
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
library(testthat)
source('functions.R')
###################################
# title: "HW04 Tester Script"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt')
test_file('tests.R')
sink()
###################################
# title: "HW04 Tests"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
library(testthat)
x <- c(1, 3, 4, 2, 7, 6, NA, 3, NA)
y <- c(1, 3, 4, 2, 7, 6, 3)
context("tests remove_missing")
test_that("remove_missing deletes NAs", {
expect_that(length(remove_missing(x)), equals(7))
expect_that(length(remove_missing(y)), equals(length(y)))
expect_that(remove_missing(x), equals(y))
expect_that(remove_missing(y), equals(y))
})
context("tests get_minimum")
test_that("get_minimum returns the minimum value",{
expect_that(get_minimum(x), is_equivalent_to(get_minimum(y)))
expect_that(length(get_minimum(x)), equals(1))
expect_that(get_minimum(x, na.rm = TRUE), is_equivalent_to(get_minimum(y)))
expect_that(get_minimum(x), equals(min(y)))
})
context("tests get_maximum")
test_that("get_maximum returns the maximum value",{
expect_that(get_maximum(x), is_equivalent_to(get_maximum(y)))
expect_that(length(get_maximum(x)), equals(1))
expect_that(get_maximum(x, na.rm = TRUE), is_equivalent_to(get_maximum(y)))
expect_that(get_maximum(x), is_equivalent_to(max(y)))
})
context("tests get_range")
test_that("get_range returns the range of values",{
expect_that(get_range(x), is_equivalent_to(get_range(y)))
expect_that(length(get_range(x)), equals(1))
expect_that(get_range(x, na.rm = TRUE), is_equivalent_to(get_range(y)))
expect_that(get_range(x), is_equivalent_to(max(y)-min(y)))
})
context("tests get_median")
test_that("get_median returns the median value",{
expect_that(get_median(x), is_equivalent_to(get_median(y)))
expect_that(length(get_median(x)), equals(1))
expect_that(get_median(x, na.rm = TRUE), is_equivalent_to(get_median(y)))
expect_that(get_median(x), is_equivalent_to(median(y)))
})
context("tests get_average")
test_that("get_average returns the average value",{
expect_that(get_average(x), is_equivalent_to(get_average(y)))
expect_that(length(get_average(x)), equals(1))
expect_that(get_average(x, na.rm = TRUE), is_equivalent_to(get_average(y)))
expect_that(get_average(x), is_equivalent_to(mean(y)))
})
context("tests get_stv")
test_that("get_stdev returns the standard  deviation",{
expect_that(get_stv(x), is_equivalent_to(get_stv(y)))
expect_that(length(get_stv(x)), equals(1))
expect_that(get_stv(x, na.rm = TRUE), is_equivalent_to(get_stv(y)))
expect_that(get_stv(x), is_equivalent_to(sd(y)))
})
context("tests get_quartile1")
test_that("get_quartile1 retuns the value at the 1st quartile",{
expect_that(get_quartile1(x), is_equivalent_to(get_quartile1(y)))
expect_that(length(get_quartile1(x)), equals(1))
expect_that(get_quartile1(x, na.rm = TRUE), is_equivalent_to(get_quartile1(y)))
expect_that(get_quartile1(x), is_equivalent_to(get_quartile1(y)))
})
context("tests get_quartile3")
test_that("get_quartile1 retuns the value at the 3rd quartile",{
expect_that(get_quartile3(x), is_equivalent_to(get_quartile3(y)))
expect_that(length(get_quartile3(x)), equals(1))
expect_that(get_quartile3(x, na.rm = TRUE), is_equivalent_to(get_quartile3(y)))
expect_that(get_quartile3(x), is_equivalent_to(get_quartile3(y)))
})
context("tests count_missing")
test_that("count_missing returns the number of missing values",{
expect_that(count_missing(x), equals(2))
expect_that(count_missing(y), equals(0))
expect_that(length(count_missing(x)), equals(1))
expect_that(count_missing(y), equals(0))
})
context("tests summary_stats")
test_that("summary_stats returns summary stats for the input vector",{
expect_that(summary_stats(x)[1], is_equivalent_to(min(y)))
expect_that(summary_stats(x)[4], is_equivalent_to(median(y)))
expect_that(summary_stats(x)[8], is_equivalent_to(max(y)))
expect_that(summary_stats(x)[9], is_equivalent_to(max(y)-min(y)))
})
context("tests rescale_100")
test_that("rescale100 rescales a vector between 1-100",{
expect_that(length(rescale100(x, 0, 20)), equals(length(x)))
expect_that(length(rescale100(x, 0, 20)), equals(length(rescale100(x, 0, 20))))
expect_that(rescale100(x, 0, 20), is_equivalent_to(rescale100(x, 0, 20)))
expect_that(rescale100(x, 0, 20), is_a(numeric))
})
context("tests drop_lowest")
test_that("drop_lowest removes the smallest element from a vector",{
expect_that(drop_lowest(x), equals(drop_lowest(y)))
expect_that(drop_lowest(x)[1], equals(drop_lowest(y)[1]))
expect_that(drop_lowest(x), is_equivalent_to(drop_lowest(y)))
expect_that(length(drop_lowest(x)), equals(length(x)-count_missing(x)-1))
})
context("tests score_homework")
test_that("score_homeworks outputs a homework score",{
expect_that(score_homework(x), is_equivalent_to(mean(y)))
expect_that(length(score_homework(x)), equals(1))
#expect_that(score_homework(x, drop = TRUE) >= score_homework(x, drop = FALSE), is_true())
expect_that(score_homework(x), is_equivalent_to(score_homework(y)))
})
context("tests score_quiz")
test_that("score_quiz outputs a quiz score",{
expect_that(score_quiz(x), is_equivalent_to(mean(y)))
expect_that(length(score_quiz(x)), equals(1))
#expect_that((score_quiz(x, drop = TRUE) >= score_quiz(x, drop = FALSE)), is_true())
expect_that(score_quiz(x), is_equivalent_to(score_quiz(y)))
})
context("tests score_lab")
test_that("score_lab outputs a lab score",{
expect_that(score_lab(12), equals(100))
expect_that(score_lab(10), equals(80))
expect_that(score_lab(8), equals(40))
expect_that(score_lab(6), equals(0))
})
test_that("rescale100 rescales a vector between 1-100",{
expect_that(length(rescale100(x, 0, 20)), equals(length(x)))
expect_that(length(rescale100(x, 0, 20)), equals(length(rescale100(x, 0, 20))))
expect_that(rescale100(x, 0, 20), is_equivalent_to(rescale100(x, 0, 20)))
#expect_that(rescale100(x, 0, 20), is_a(numeric))
})
###################################
# title: "HW04 Tests"
# subtitle: "Stat 133, Fall 2017"
# author: "Tyler Larsen"
###################################
library(testthat)
x <- c(1, 3, 4, 2, 7, 6, NA, 3, NA)
y <- c(1, 3, 4, 2, 7, 6, 3)
context("tests remove_missing")
test_that("remove_missing deletes NAs", {
expect_that(length(remove_missing(x)), equals(7))
expect_that(length(remove_missing(y)), equals(length(y)))
expect_that(remove_missing(x), equals(y))
expect_that(remove_missing(y), equals(y))
})
context("tests get_minimum")
test_that("get_minimum returns the minimum value",{
expect_that(get_minimum(x), is_equivalent_to(get_minimum(y)))
expect_that(length(get_minimum(x)), equals(1))
expect_that(get_minimum(x, na.rm = TRUE), is_equivalent_to(get_minimum(y)))
expect_that(get_minimum(x), equals(min(y)))
})
context("tests get_maximum")
test_that("get_maximum returns the maximum value",{
expect_that(get_maximum(x), is_equivalent_to(get_maximum(y)))
expect_that(length(get_maximum(x)), equals(1))
expect_that(get_maximum(x, na.rm = TRUE), is_equivalent_to(get_maximum(y)))
expect_that(get_maximum(x), is_equivalent_to(max(y)))
})
context("tests get_range")
test_that("get_range returns the range of values",{
expect_that(get_range(x), is_equivalent_to(get_range(y)))
expect_that(length(get_range(x)), equals(1))
expect_that(get_range(x, na.rm = TRUE), is_equivalent_to(get_range(y)))
expect_that(get_range(x), is_equivalent_to(max(y)-min(y)))
})
context("tests get_median")
test_that("get_median returns the median value",{
expect_that(get_median(x), is_equivalent_to(get_median(y)))
expect_that(length(get_median(x)), equals(1))
expect_that(get_median(x, na.rm = TRUE), is_equivalent_to(get_median(y)))
expect_that(get_median(x), is_equivalent_to(median(y)))
})
context("tests get_average")
test_that("get_average returns the average value",{
expect_that(get_average(x), is_equivalent_to(get_average(y)))
expect_that(length(get_average(x)), equals(1))
expect_that(get_average(x, na.rm = TRUE), is_equivalent_to(get_average(y)))
expect_that(get_average(x), is_equivalent_to(mean(y)))
})
context("tests get_stv")
test_that("get_stdev returns the standard  deviation",{
expect_that(get_stv(x), is_equivalent_to(get_stv(y)))
expect_that(length(get_stv(x)), equals(1))
expect_that(get_stv(x, na.rm = TRUE), is_equivalent_to(get_stv(y)))
expect_that(get_stv(x), is_equivalent_to(sd(y)))
})
context("tests get_quartile1")
test_that("get_quartile1 retuns the value at the 1st quartile",{
expect_that(get_quartile1(x), is_equivalent_to(get_quartile1(y)))
expect_that(length(get_quartile1(x)), equals(1))
expect_that(get_quartile1(x, na.rm = TRUE), is_equivalent_to(get_quartile1(y)))
expect_that(get_quartile1(x), is_equivalent_to(get_quartile1(y)))
})
context("tests get_quartile3")
test_that("get_quartile1 retuns the value at the 3rd quartile",{
expect_that(get_quartile3(x), is_equivalent_to(get_quartile3(y)))
expect_that(length(get_quartile3(x)), equals(1))
expect_that(get_quartile3(x, na.rm = TRUE), is_equivalent_to(get_quartile3(y)))
expect_that(get_quartile3(x), is_equivalent_to(get_quartile3(y)))
})
context("tests count_missing")
test_that("count_missing returns the number of missing values",{
expect_that(count_missing(x), equals(2))
expect_that(count_missing(y), equals(0))
expect_that(length(count_missing(x)), equals(1))
expect_that(count_missing(y), equals(0))
})
context("tests summary_stats")
test_that("summary_stats returns summary stats for the input vector",{
expect_that(summary_stats(x)[1], is_equivalent_to(min(y)))
expect_that(summary_stats(x)[4], is_equivalent_to(median(y)))
expect_that(summary_stats(x)[8], is_equivalent_to(max(y)))
expect_that(summary_stats(x)[9], is_equivalent_to(max(y)-min(y)))
})
context("tests rescale_100")
test_that("rescale100 rescales a vector between 1-100",{
expect_that(length(rescale100(x, 0, 20)), equals(length(x)))
expect_that(length(rescale100(x, 0, 20)), equals(length(rescale100(x, 0, 20))))
expect_that(rescale100(x, 0, 20), is_equivalent_to(rescale100(x, 0, 20)))
#expect_that(rescale100(x, 0, 20), is_a(numeric))
})
context("tests drop_lowest")
test_that("drop_lowest removes the smallest element from a vector",{
expect_that(drop_lowest(x), equals(drop_lowest(y)))
expect_that(drop_lowest(x)[1], equals(drop_lowest(y)[1]))
expect_that(drop_lowest(x), is_equivalent_to(drop_lowest(y)))
expect_that(length(drop_lowest(x)), equals(length(x)-count_missing(x)-1))
})
context("tests score_homework")
test_that("score_homeworks outputs a homework score",{
expect_that(score_homework(x), is_equivalent_to(mean(y)))
expect_that(length(score_homework(x)), equals(1))
#expect_that(score_homework(x, drop = TRUE) >= score_homework(x, drop = FALSE), is_true())
expect_that(score_homework(x), is_equivalent_to(score_homework(y)))
})
context("tests score_quiz")
test_that("score_quiz outputs a quiz score",{
expect_that(score_quiz(x), is_equivalent_to(mean(y)))
expect_that(length(score_quiz(x)), equals(1))
#expect_that((score_quiz(x, drop = TRUE) >= score_quiz(x, drop = FALSE)), is_true())
expect_that(score_quiz(x), is_equivalent_to(score_quiz(y)))
})
context("tests score_lab")
test_that("score_lab outputs a lab score",{
expect_that(score_lab(12), equals(100))
expect_that(score_lab(10), equals(80))
expect_that(score_lab(8), equals(40))
expect_that(score_lab(6), equals(0))
})
context("tests rescale_100")
test_that("rescale100 rescales a vector between 1-100",{
expect_that(length(rescale100(x, 0, 20)), equals(length(x)))
expect_that(length(rescale100(x, 0, 20)), equals(length(rescale100(x, 0, 20))))
expect_that(rescale100(x, 0, 20), is_equivalent_to(rescale100(x, 0, 20)))
expect_that(rescale100(y, 0, 20), is_a(numeric))
})
class(c)
class(c((2.3, 55.7, 64.453)))
class(c(2.3, 55.7, 64.453))
context("tests rescale_100")
test_that("rescale100 rescales a vector between 1-100",{
expect_that(length(rescale100(x, 0, 20)), equals(length(x)))
expect_that(length(rescale100(x, 0, 20)), equals(length(rescale100(x, 0, 20))))
expect_that(rescale100(x, 0, 20), is_equivalent_to(rescale100(x, 0, 20)))
#expect_that(rescale100(y, 0, 20), is_a(numeric))
})
class]
class(rescale100(x, 0, 20))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
print_stats(summary_stats(dat$HW1))
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app/gradvis.R')
runGitHub("stat133-hws-fall17", "ttylerlarsen", subdir = "hw04/app")
runApp('~/Desktop/stat133/stat133-hws-fall17/hw04/app')
